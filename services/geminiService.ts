
import { GoogleGenAI, GenerateContentResponse, Type } from "@google/genai";
import { AnalysisResult, Challenge } from '../types';

if (!import.meta.env.VITE_API_KEY) {
  throw new Error("VITE_API_KEY environment variable not set");
}

const ai = new GoogleGenAI({ apiKey: import.meta.env.VITE_API_KEY });

async function urlToGenerativePart(url: string, mimeType: string) {
  const response = await fetch(url);
  if (!response.ok) {
    throw new Error(`Failed to fetch image from URL: ${url}`);
  }
  const buffer = await response.arrayBuffer();
  const uint8Array = new Uint8Array(buffer);
  const binaryString = Array.from(uint8Array).map((byte) => String.fromCharCode(byte)).join('');
  const base64 = btoa(binaryString);
  return {
    inlineData: {
      data: base64,
      mimeType,
    },
  };
}

export const generateImage = async (prompt: string): Promise<string> => {
  try {
    const response = await ai.models.generateImages({
      model: 'imagen-3.0-generate-002',
      prompt: prompt,
      config: {
        numberOfImages: 1,
        outputMimeType: 'image/jpeg',
        aspectRatio: '1:1',
      },
    });
    
    if (response.generatedImages && response.generatedImages.length > 0) {
      return response.generatedImages[0].image.imageBytes;
    } else {
      throw new Error("Image generation failed, no images returned.");
    }
  } catch (error) {
    console.error("Error in generateImage:", error);
    throw new Error("Failed to generate image. Please check your prompt or API key.");
  }
};

export const analyzeImages = async (challenge: Challenge, generatedImageBase64: string): Promise<AnalysisResult> => {
  const model = 'gemini-2.5-flash';
  
  const analysisPrompt = `
    You are an expert image analysis AI. A student is attempting a prompt engineering challenge.
    The challenge is called "${challenge.name}".
    The goal is: "${challenge.description}".
    
    Compare the following two images. The first is the target image for the challenge, and the second is the image generated by the student.
    Analyze how closely the generated image matches the target in terms of subject, composition, color, style, and overall mood, keeping the challenge goal in mind.
    Be objective and strict in your scoring.
    Respond ONLY with a JSON object that matches the provided schema.
  `;

  try {
    const targetImagePart = await urlToGenerativePart(challenge.imageUrl, "image/jpeg");
    const generatedImagePart = {
      inlineData: {
        data: generatedImageBase64,
        mimeType: "image/jpeg",
      },
    };

    const response: GenerateContentResponse = await ai.models.generateContent({
      model: model,
      contents: {
          parts: [
            { text: analysisPrompt },
            targetImagePart,
            generatedImagePart,
          ]
      },
      config: {
        responseMimeType: "application/json",
        responseSchema: {
          type: Type.OBJECT,
          properties: {
            similarityScore: {
              type: Type.NUMBER,
              description: 'A similarity score from 0 to 100, where 100 is a perfect match.'
            },
            feedback: {
              type: Type.STRING,
              description: 'Constructive feedback explaining the similarities and differences, highlighting areas for improvement.'
            }
          },
          required: ['similarityScore', 'feedback'],
        }
      }
    });

    const jsonText = response.text.trim();
    const result = JSON.parse(jsonText);

    if (typeof result.similarityScore !== 'number' || typeof result.feedback !== 'string') {
        throw new Error('Invalid JSON structure received from analysis API.');
    }

    return result as AnalysisResult;

  } catch (error) {
    console.error("Error in analyzeImages:", error);
    throw new Error("Failed to analyze images. The model may have returned an unexpected response.");
  }
};

/**
 * Fetches an image from a local URL and returns it as a blob URL.
 * This is useful for ensuring images are loaded and displayed correctly
 * when relative paths might be problematic.
 * @param url The local URL of the image (e.g., '/challenges/challenge-1.jpg')
 * @returns A promise that resolves to a blob URL (e.g., 'blob:http://...')
 */
export const getLocalImageAsBlobUrl = async (url: string): Promise<string> => {
  try {
    const response = await fetch(url);
    if (!response.ok) {
      throw new Error(`Failed to fetch image from URL: ${url}. Status: ${response.statusText}`);
    }
    const blob = await response.blob();
    return URL.createObjectURL(blob);
  } catch (error) {
    console.error(`Error fetching local image ${url}:`, error);
    // Fallback to the original URL if fetching fails, allowing the browser to try and load it directly.
    return url;
  }
};
